apply plugin: 'com.android.application'

def arcore_libpath = "${buildDir}/arcore-native"
configurations { natives }

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    clean
    defaultConfig {
        applicationId "com.eecs487.jniteapot"
        minSdkVersion 21 // Note: gles 3.1 requires sdk 21+, gles 3.2/vulkan 1.0 requires 24+, vulkan 1.1 requires 28+, egl 1.5 implemented in 29
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        ndkVersion "21.3.6528147"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang",
                          "-DANDROID_STL=c++_static",
//                          "-DCMAKE_BUILD_TYPE=Release"
                          "-DCMAKE_BUILD_TYPE=Debug",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                        "-DARCORE_INCLUDE=${project.rootDir}/app/src/main/cpp/include",
                        "-DGLM_INCLUDE=${project.rootDir}/app/src/main/cpp/glm"
            }
        }

    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation 'com.google.ar:core:1.19.0'
    natives 'com.google.ar:core:1.19.0'

    task extractNativeLibraries() {
        // Always extract, this insures the native libs are updated if the version changes.
        outputs.upToDateWhen { false }
        doFirst {
            configurations.natives.files.each { f ->
                copy {
                    from zipTree(f)
                    into arcore_libpath
                    include "jni/**/*"
                }
            }
        }
    }
    tasks.whenTaskAdded {
        task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
            task.dependsOn(extractNativeLibraries)
        }
    }
}