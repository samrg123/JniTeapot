Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransport = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@amplitude/types");
/** Base Transport class implementation */
var BaseTransport = /** @class */ (function () {
    /** Create instance and set this.dsn */
    function BaseTransport(options) {
        this.options = options;
        /** Locks transport after receiving 429 response */
        this._disabledUntil = new Date(Date.now());
        this._uploadInProgress = false;
    }
    BaseTransport.prototype.sendPayload = function (_) {
        throw new Error("Method not implemented.");
    };
    /** Returns a build request option object used by request */
    BaseTransport.prototype._getRequestOptions = function () {
        var headers = tslib_1.__assign({}, this.options.headers);
        var options = {
            agent: this.client,
            headers: headers,
            method: 'POST',
        };
        return options;
    };
    /** JSDoc */
    BaseTransport.prototype._sendWithModule = function (httpModule, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (new Date(Date.now()) < this._disabledUntil) {
                    return [2 /*return*/, Promise.reject(new Error("Transport locked till " + this._disabledUntil + " due to too many requests."))];
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var req = httpModule.request(_this._getRequestOptions(), function (res) {
                            var statusCode = res.statusCode || 500;
                            var status = types_1.Status.fromHttpCode(statusCode);
                            res.setEncoding('utf8');
                            if (status === types_1.Status.Success) {
                                resolve({ status: status });
                            }
                            else {
                                if (status === types_1.Status.RateLimit) {
                                    var now = Date.now();
                                    _this._disabledUntil = new Date(now + 30 * 1000);
                                }
                                var rejectionMessage = "HTTP Error (" + statusCode + ")";
                                reject(new Error(rejectionMessage));
                            }
                            // Force the socket to drain
                            res.on('data', function () {
                                // Drain
                            });
                            res.on('end', function () {
                                // Drain
                            });
                        });
                        req.on('error', reject);
                        req.end(JSON.stringify(payload));
                    })];
            });
        });
    };
    return BaseTransport;
}());
exports.BaseTransport = BaseTransport;
//# sourceMappingURL=base.js.map