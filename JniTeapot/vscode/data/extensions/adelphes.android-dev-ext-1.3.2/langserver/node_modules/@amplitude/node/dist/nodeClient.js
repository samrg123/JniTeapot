Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeClient = void 0;
var https = require("https");
var constants_1 = require("./constants");
var NodeClient = /** @class */ (function () {
    /**
     * Initializes this client instance.
     *
     * @param apiKey API key for your project
     * @param options options for the client
     */
    function NodeClient(apiKey, options) {
        this._apiKey = apiKey;
        this._options = options;
    }
    /**
     * @inheritDoc
     */
    NodeClient.prototype.getOptions = function () {
        return this._options;
    };
    /**
     * @inheritDoc
     */
    NodeClient.prototype.flush = function () {
        throw new Error('Method not implemented.');
    };
    /**
     * @inheritDoc
     */
    NodeClient.prototype.logEvent = function (event) {
        if (this._options.optOut === true) {
            return;
        }
        this._annotateEvent(event);
        var payload = JSON.stringify({
            api_key: this._apiKey,
            events: [event],
        });
        var hostname = this._options.serverUrl || constants_1.AMPLITUDE_API_HOST;
        var requestOptions = {
            hostname: hostname,
            path: constants_1.AMPLITUDE_API_PATH,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        };
        var req = https.request(requestOptions, function (res) {
            res.on('data', function (_) {
                // Request finishes.
                // We currently don't have error handling or retry, but we will add it soon.
            });
        });
        req.on('error', function (error) {
            console.info('[Amplitude|Error] Event is not submitted.', error);
        });
        req.write(payload);
        req.end();
    };
    /** Add platform dependent field onto event. */
    NodeClient.prototype._annotateEvent = function (event) {
        event.library = constants_1.SDK_NAME + "/" + constants_1.SDK_VERSION;
        event.platform = 'Node.js';
    };
    return NodeClient;
}());
exports.NodeClient = NodeClient;
//# sourceMappingURL=nodeClient.js.map