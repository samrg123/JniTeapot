{"version":3,"file":"nodeClient.js","sourceRoot":"","sources":["../src/nodeClient.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAE/B,yCAA4F;AAE5F;IAOE;;;;;OAKG;IACH,oBAAmB,MAAc,EAAE,OAAgB;QACjD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,+BAAU,GAAV;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,0BAAK,GAAL;QACE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACI,6BAAQ,GAAf,UAAgB,KAAY;QAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,EAAE;YACjC,OAAO;SACR;QAED,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAE3B,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;YAC7B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,CAAC,KAAK,CAAC;SAChB,CAAC,CAAC;QAEH,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,8BAAkB,CAAA;QAC9D,IAAM,cAAc,GAAG;YACrB,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,8BAAkB;YACxB,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;SACF,CAAC;QAEF,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE,UAAA,GAAG;YAC3C,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,CAAC;gBACd,oBAAoB;gBACpB,4EAA4E;YAC9E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,KAAK;YACnB,OAAO,CAAC,IAAI,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnB,GAAG,CAAC,GAAG,EAAE,CAAC;IACZ,CAAC;IAED,+CAA+C;IACvC,mCAAc,GAAtB,UAAuB,KAAY;QACjC,KAAK,CAAC,OAAO,GAAM,oBAAQ,SAAI,uBAAa,CAAC;QAC7C,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC7B,CAAC;IACH,iBAAC;AAAD,CAAC,AA7ED,IA6EC;AA7EY,gCAAU","sourcesContent":["import * as https from 'https';\nimport { Client, Event, Options } from '@amplitude/types';\nimport { SDK_NAME, SDK_VERSION, AMPLITUDE_API_HOST, AMPLITUDE_API_PATH } from './constants';\n\nexport class NodeClient implements Client<Options> {\n  /** Project Api Key */\n  protected readonly _apiKey: string;\n\n  /** Options for the client. */\n  protected readonly _options: Options;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param apiKey API key for your project\n   * @param options options for the client\n   */\n  public constructor(apiKey: string, options: Options) {\n    this._apiKey = apiKey;\n    this._options = options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOptions(): Options {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  flush(): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public logEvent(event: Event): void {\n    if (this._options.optOut === true) {\n      return;\n    }\n\n    this._annotateEvent(event);\n\n    const payload = JSON.stringify({\n      api_key: this._apiKey,\n      events: [event],\n    });\n\n    const hostname = this._options.serverUrl || AMPLITUDE_API_HOST\n    const requestOptions = {\n      hostname: hostname,\n      path: AMPLITUDE_API_PATH,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const req = https.request(requestOptions, res => {\n      res.on('data', _ => {\n        // Request finishes.\n        // We currently don't have error handling or retry, but we will add it soon.\n      });\n    });\n\n    req.on('error', error => {\n      console.info('[Amplitude|Error] Event is not submitted.', error);\n    });\n\n    req.write(payload);\n    req.end();\n  }\n\n  /** Add platform dependent field onto event. */\n  private _annotateEvent(event: Event): void {\n    event.library = `${SDK_NAME}/${SDK_VERSION}`;\n    event.platform = 'Node.js';\n  }\n}\n"]}